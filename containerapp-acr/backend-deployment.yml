# Azure Pipeline that run basic continuous integration on a Terraform project
# This makes sure the pipeline is triggered every time code is pushed in the validation-testing example source, on all branches.
trigger:
  branches:
    include:
    - 'main'
  paths:
    include:
    - 'MyIaCPortfolio/containerapp-acr/*'

variables:
  serviceConnection: 'ServiceConnectiontoDevOps'
  azureLocation: 'canadacentral'

stages:
  - stage: TerraformContinuousIntegration 
    displayName: Create Back end with Terraform - CI
    jobs:
    - job: TerraformContinuousIntegrationJob
      displayName: TerraformContinuousIntegration - CI Job - Backend creation
      pool:
        name: MySelfHosted   
      steps:
      - checkout: self
      - script: dir
        displayName: List files in workspace
      - task: TerraformCLI@2
        inputs:
          command: 'version'
          allowTelemetryCollection: true
      - task: TerraformCLI@2
        inputs:
          command: 'init'
          workingDirectory: '$(System.DefaultWorkingDirectory)/containerapp-acr/create-backend'
          allowTelemetryCollection: true
          backendServiceArm: '$(serviceConnection)'
        displayName: "Initialize the template for the backend"      
      - task: TerraformCLI@2
        inputs:
          command: 'plan'
          workingDirectory: '$(System.DefaultWorkingDirectory)/containerapp-acr/create-backend'
          environmentServiceName: 'ServiceConnectiontoDevOps'
          runAzLogin: true
          allowTelemetryCollection: true
          publishPlanResults: 'plan.out'
        displayName: "Plan the deployment"
      - task: AzureCLI@2
        inputs:
          azureSubscription: '$(serviceConnection)'
          scriptType: 'ps'
          scriptLocation: 'inlineScript'
          inlineScript: |
            dir
            cd containerapp-acr
            cd create-backend
            dir
            # Fail on errors
            $ErrorActionPreference = "Stop"

            # Mapping: terraform_address -> script block that returns resource id as string (or $null)
            $IMPORT_MAP = @{
              "azurerm_resource_group.rg"  = { az group show -n "my-rg" --query id -o tsv 2>$null }
              "azurerm_storage_account.sa" = { az storage account show -n "myStorageAccount" -g "my-rg" --query id -o tsv 2>$null }
            }

            # Ensure terraform is initialized and available in the current directory
            Write-Host "Checking terraform availability and backend state..."
            try {
              & terraform state list > $null 2>&1
            } catch {
              Write-Host "terraform state could not be listed. Ensure 'terraform init' has been run in this working directory and backend is accessible."
              throw
            }

            foreach ($addr in $IMPORT_MAP.Keys) {
              Write-Host "Checking Terraform state for $addr..."
              $inState = $false
              try {
                $stateList = & terraform state list
                $lines = $stateList -split "`n"
                foreach ($line in $lines) {
                  if ($line.Trim() -eq $addr) { $inState = $true; break }
                }
              } catch {
                Write-Host "Failed to list terraform state for check. $($_.Exception.Message)"
                throw
              }

              if ($inState) {
                Write-Host "$addr already in state, skipping import."
                continue
              }

              Write-Host "$addr not in state. Locating resource id with az..."
              $resourceId = $null
              try {
                $resourceId = & $IMPORT_MAP[$addr].Invoke()
                if ($resourceId) { $resourceId = $resourceId.Trim() } else { $resourceId = $null }
              } catch {
                Write-Host "az query for $addr failed: $($_.Exception.Message)"
                $resourceId = $null
              }

              if ([string]::IsNullOrWhiteSpace($resourceId)) {
                Write-Host "Resource for $addr not found in Azure, skipping import (it may be safe to create)."
                continue
              }

              Write-Host "Importing $addr -> $resourceId"
              try {
                & terraform import -lock-timeout=300 $addr $resourceId
                Write-Host "Import succeeded for $addr"
              } catch {
                Write-Host "Import failed for $addr: $($_.Exception.Message)"
                throw
              }
            }
      - task: TerraformCLI@2
        inputs:
          command: 'apply'
          workingDirectory: '$(System.DefaultWorkingDirectory)/containerapp-acr/create-backend'
          environmentServiceName: 'ServiceConnectiontoDevOps'
          runAzLogin: true
          commandOptions: '-auto-approve'
          allowTelemetryCollection: true
        displayName: "Deploy the backend"
  - template: infrastructure-deployment.yml
    parameters:
      serviceConnection: ${{ variables.serviceConnection }}
      azureLocation: ${{ variables.azureLocation }}


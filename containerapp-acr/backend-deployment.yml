# Azure Pipeline that run basic continuous integration on a Terraform project
# This makes sure the pipeline is triggered every time code is pushed in the validation-testing example source, on all branches.
trigger:
  branches:
    include:
    - 'main'
  paths:
    include:
    - 'MyIaCPortfolio/containerapp-acr/*'

variables:
  serviceConnection: 'ServiceConnectiontoDevOps'
  azureLocation: 'canadacentral'

stages:
  - stage: TerraformContinuousIntegration 
    displayName: Create Back end with Terraform - CI
    jobs:
    - job: TerraformContinuousIntegrationJob
      displayName: TerraformContinuousIntegration - CI Job - Backend creation
      pool:
        name: MySelfHosted   
      steps:
      - checkout: self
      - script: dir
        displayName: List files in workspace
      - task: TerraformCLI@2
        inputs:
          command: 'version'
          allowTelemetryCollection: true
      - task: TerraformCLI@2
        inputs:
          command: 'init'
          workingDirectory: '$(System.DefaultWorkingDirectory)/containerapp-acr/create-backend'
          allowTelemetryCollection: true
          backendServiceArm: '$(serviceConnection)'
        displayName: "Initialize the template for the backend"      
      - task: TerraformCLI@2
        inputs:
          command: 'plan'
          workingDirectory: '$(System.DefaultWorkingDirectory)/containerapp-acr/create-backend'
          environmentServiceName: 'ServiceConnectiontoDevOps'
          runAzLogin: true
          allowTelemetryCollection: true
          publishPlanResults: 'plan.out'
        displayName: "Plan the deployment"
      # Convert plan.out to JSON
      - script: |
          cd "$(System.DefaultWorkingDirectory)/containerapp-acr/create-backend"

          if (Test-Path "plan.out") {
            terraform show -json plan.out > plan.json
            Write-Host "plan.out found and converted to plan.json"
          } else {
            Write-Error "plan.out not found in $(System.DefaultWorkingDirectory)/containerapp-acr/create-backend"
            exit 1
          }
        displayName: "Convert Terraform plan to JSON"
        workingDirectory: '$(System.DefaultWorkingDirectory)/containerapp-acr/create-backend'
      - task: AzureCLI@2
        inputs:
          azureSubscription: '$(serviceConnection)'
          scriptType: 'ps'
          workingDirectory: '$(System.DefaultWorkingDirectory)/containerapp-acr/create-backend'
          scriptLocation: 'inlineScript'
          inlineScript: |
            Write-Host "Reading Terraform plan.json to identify resources for import..."

            $planPath = "$(System.DefaultWorkingDirectory)/containerapp-acr/create-backend/plan.json"
            $plan = Get-Content $planPath -Raw | ConvertFrom-Json

            # Filter only relevant resource types (you can modify this list)
            $targetTypes = @("azurerm_resource_group", "azurerm_storage_account", "azurerm_storage_container")

            $resources = @()
            foreach ($res in $plan.resource_changes) {
              if ($targetTypes -contains $res.type) {
                # Construct a reasonable terraform address (module paths are handled automatically)
                $addr = "$($res.type).$($res.name)"
                $resources += @{ addr = $addr; type = $res.type }
              }
            }

            if (-not $resources) {
              Write-Host "No matching resources found in plan."
              exit 0
            }

            Write-Host "Found $($resources.Count) resource(s) to validate for import..."

            foreach ($r in $resources) {
              Write-Host "Attempting import for $($r.addr)..."

              switch ($r.type) {
                "azurerm_resource_group" {
                  $id = "/subscriptions/8412747f-ace3-4b85-8ef7-4e8c0eab877d/resourceGroups/tfstatestoragecontapp"
                }
                "azurerm_storage_account" {
                  $id = "/subscriptions/8412747f-ace3-4b85-8ef7-4e8c0eab877d/resourceGroups/tfstatestoragecontapp/providers/Microsoft.Storage/storageAccounts/tfstatestoragecontapp"
                }
                "azurerm_storage_container" {
                  $id = "tfstatestoragecontapp/tfstate-contapp"
                }
                default {
                  continue
                }
              }

              try {
                & terraform import $($r.addr) $id
                Write-Host "✅ Imported $($r.addr)"
              } catch {
                Write-Host "⚠️ Skipping $($r.addr) - already imported or not found."
              }
            }
      - task: TerraformCLI@2
        inputs:
          command: 'apply'
          workingDirectory: '$(System.DefaultWorkingDirectory)/containerapp-acr/create-backend'
          environmentServiceName: 'ServiceConnectiontoDevOps'
          runAzLogin: true
          commandOptions: '-auto-approve'
          allowTelemetryCollection: true
        displayName: "Deploy the backend"
  - template: infrastructure-deployment.yml
    parameters:
      serviceConnection: ${{ variables.serviceConnection }}
      azureLocation: ${{ variables.azureLocation }}


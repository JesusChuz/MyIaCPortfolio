# Azure Pipeline that run basic continuous integration on a Terraform project
# This makes sure the pipeline is triggered every time code is pushed in the validation-testing example source, on all branches.
trigger:
  branches:
    include:
    - 'main'
  paths:
    include:
    - 'MyIaCPortfolio/containerapp-acr/*'

variables:
  serviceConnection: 'ServiceConnectiontoDevOps'
  azureLocation: 'canadacentral'

stages:
  - stage: TerraformContinuousIntegration 
    displayName: Create Back end with Terraform - CI
    jobs:
    - job: TerraformContinuousIntegrationJob
      displayName: TerraformContinuousIntegration - CI Job - Backend creation
      pool:
        name: MySelfHosted   
      steps:
      - checkout: self
      - script: dir
        displayName: List files in workspace
      - task: TerraformCLI@2
        inputs:
          command: 'version'
          allowTelemetryCollection: true
        displayName: "Check terraform version"   
      - task: TerraformCLI@2
        inputs:
          command: 'init'
          workingDirectory: '$(System.DefaultWorkingDirectory)/containerapp-acr/create-backend'
          allowTelemetryCollection: true
          backendServiceArm: '$(serviceConnection)'
        displayName: "Initialize the template for the backend"      
      - task: TerraformCLI@2
        inputs:
          command: 'plan'
          workingDirectory: '$(System.DefaultWorkingDirectory)/containerapp-acr/create-backend'
          environmentServiceName: 'ServiceConnectiontoDevOps'
          runAzLogin: true
          allowTelemetryCollection: true
        displayName: "Plan the deployment"
      - task: AzureCLI@2
        inputs:
          azureSubscription: '$(serviceConnection)'
          scriptType: 'ps'
          workingDirectory: '$(System.DefaultWorkingDirectory)/containerapp-acr/create-backend'
          scriptLocation: 'inlineScript'
          inlineScript: |
            # Fail on errors
            $ErrorActionPreference = "Continue"
            Write-Host "Running Terraform imports (validating Azure resources first)..."

            # Define resources and how to check their existence
            $resources = @(
              @{
                addr = "azurerm_resource_group.tfstate_rg"
                id   = "/subscriptions/8412747f-ace3-4b85-8ef7-4e8c0eab877d/resourceGroups/tfstatestoragecontapp"
                check = { az group show -n "tfstatestoragecontapp" --query "id" -o tsv 2>$null }
              },
              @{
                addr = "azurerm_storage_account.tfstate_sa"
                id   = "/subscriptions/8412747f-ace3-4b85-8ef7-4e8c0eab877d/resourceGroups/tfstatestoragecontapp/providers/Microsoft.Storage/storageAccounts/tfstatestoragecontapp"
                check = { az storage account show -n "tfstatestoragecontapp" -g "tfstatestoragecontapp" --query "id" -o tsv 2>$null }
              },
              @{
                addr = "azurerm_storage_container.tfstate_container"
                id   = "https://tfstatestoragecontapp.blob.core.windows.net/tfstate-contapp"
                check = { az storage account show -n "tfstatestoragecontapp" -g "tfstatestoragecontapp" --query "id" -o tsv 2>$null }
              }
            )

            foreach ($r in $resources) {
              Write-Host "`nChecking existence of Azure resource for $($r.addr)..."

              try {
                $exists = & $r.check
                if (-not $exists) {
                  Write-Host "Resource for $($r.addr) not found in Azure. Skipping import."
                  continue
                }

                Write-Host "Resource exists in Azure. Attempting Terraform import for $($r.addr)..."
                & terraform import $($r.addr) $($r.id)
                Write-Host "Successfully imported $($r.addr)"
              }
              catch {
                Write-Host "Error while checking or importing $($r.addr): $($_.Exception.Message)"
              }
            }
        displayName: "Validate if it is needed to import resources from the state"  
      - task: TerraformCLI@2
        inputs:
          command: 'apply'
          workingDirectory: '$(System.DefaultWorkingDirectory)/containerapp-acr/create-backend'
          environmentServiceName: 'ServiceConnectiontoDevOps'
          runAzLogin: true
          commandOptions: '-auto-approve'
          allowTelemetryCollection: true
        displayName: "Deploy the backend"
  - template: infrastructure-deployment.yml
    parameters:
      serviceConnection: ${{ variables.serviceConnection }}
      azureLocation: ${{ variables.azureLocation }}


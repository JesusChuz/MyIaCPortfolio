# Azure Pipeline that run basic continuous integration on a Terraform project
# This makes sure the pipeline is triggered every time code is pushed in the validation-testing example source, on all branches.
trigger:
  branches:
    include:
    - 'main'
  paths:
    include:
    - 'MyIaCPortfolio/containerapp-acr/*'

variables:
  serviceConnection: 'ServiceConnectiontoDevOps'
  azureLocation: 'canadacentral'

stages:
  - stage: TerraformContinuousIntegration 
    displayName: Create Back end with Terraform - CI
    jobs:
    - job: TerraformContinuousIntegrationJob
      displayName: TerraformContinuousIntegration - CI Job - Backend creation
      pool:
        name: MySelfHosted   
      steps:
      - checkout: self
      - script: dir
        displayName: List files in workspace
      - task: TerraformCLI@2
        inputs:
          command: 'version'
          allowTelemetryCollection: true
      - task: TerraformCLI@2
        inputs:
          command: 'init'
          workingDirectory: '$(System.DefaultWorkingDirectory)/containerapp-acr/create-backend'
          allowTelemetryCollection: true
          backendServiceArm: '$(serviceConnection)'
        displayName: "Initialize the template for the backend"      
      - task: TerraformCLI@2
        inputs:
          command: 'plan'
          workingDirectory: '$(System.DefaultWorkingDirectory)/containerapp-acr/create-backend'
          environmentServiceName: 'ServiceConnectiontoDevOps'
          runAzLogin: true
          allowTelemetryCollection: true
        displayName: "Plan the deployment"
      - task: TerraformCLI@2
        inputs:
          command: 'output'
          workingDirectory: '$(System.DefaultWorkingDirectory)/containerapp-acr/create-backend'
          commandOptions: '-json'
          allowTelemetryCollection: false
      - task: AzureCLI@2
        inputs:
          azureSubscription: '$(serviceConnection)'
          scriptType: 'ps'
          workingDirectory: '$(System.DefaultWorkingDirectory)/containerapp-acr/create-backend'
          scriptLocation: 'inlineScript'
          inlineScript: |
            # Fail on errors
            $ErrorActionPreference = "Stop"
             # Run terraform output and capture JSON
            $tfOutput = terraform output -json | Out-String
            
            Write-Host "Raw Terraform output:"
            Write-Host $tfOutput
            
            # Parse JSON
            $props = $tfOutput | ConvertFrom-Json
            
            # Extract values from outputs
            $rgName = $props.resource_group_name.value
            $saName = $props.app_service_name.value
            $saContainerName = $props.slot_name.value

            Write-Host "Resource Group: $rgName"
            Write-Host "Storage account: $saName"
            Write-Host "Storage account container: $saContainerName"
            
            # Export as Azure DevOps pipeline variables
            Write-Host "##vso[task.setvariable variable=AZ_RG;isOutput=true]$rgName"
            Write-Host "##vso[task.setvariable variable=AZ_SA;isOutput=true]$saName"
            Write-Host "##vso[task.setvariable variable=AZ_SA_CONTAINER;isOutput=true]$saContainerName"

            Write-Host "Running Terraform imports (ignoring any failures)..."

            $resources = @(
              @{ addr = "azurerm_resource_group.tfstate_rg"; id = "/subscriptions/8412747f-ace3-4b85-8ef7-4e8c0eab877d/resourceGroups/tfstatestoragecontapp" },
              @{ addr = "azurerm_storage_account.tfstate_sa"; id = "/subscriptions/8412747f-ace3-4b85-8ef7-4e8c0eab877d/resourceGroups/tfstatestoragecontapp/providers/Microsoft.Storage/storageAccounts/tfstatestoragecontapp" }
              @{ addr = "azurerm_storage_container.tfstate_container"; id = "https://tfstatestoragecontapp.blob.core.windows.net/tfstate-contapp" }
            )

            foreach ($r in $resources) {
              Write-Host "Attempting to import $($r.addr)..."
              try {
                & terraform import $($r.addr) $($r.id)
                Write-Host "Successfully imported $($r.addr)"
              } catch {
                Write-Host "Skipping $($r.addr) - likely already in state or not found."
              }
            }
      - task: TerraformCLI@2
        inputs:
          command: 'apply'
          workingDirectory: '$(System.DefaultWorkingDirectory)/containerapp-acr/create-backend'
          environmentServiceName: 'ServiceConnectiontoDevOps'
          runAzLogin: true
          commandOptions: '-auto-approve'
          allowTelemetryCollection: true
        displayName: "Deploy the backend"
  - template: infrastructure-deployment.yml
    parameters:
      serviceConnection: ${{ variables.serviceConnection }}
      azureLocation: ${{ variables.azureLocation }}


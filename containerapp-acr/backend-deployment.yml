# Azure Pipeline that run basic continuous integration on a Terraform project
# This makes sure the pipeline is triggered every time code is pushed in the validation-testing example source, on all branches.
trigger:
  branches:
    include:
    - 'main'
  paths:
    include:
    - 'MyIaCPortfolio/containerapp-acr/*'

variables:
  serviceConnection: 'ServiceConnectiontoDevOps'
  azureLocation: 'canadacentral'

stages:
  - stage: TerraformContinuousIntegration 
    displayName: Create Back end with Terraform - CI
    jobs:
    - job: TerraformContinuousIntegrationJob
      displayName: TerraformContinuousIntegration - CI Job - Backend creation
      pool:
        name: MySelfHosted   
      steps:
      - checkout: self
      - script: dir
        displayName: List files in workspace
      - task: TerraformCLI@2
        inputs:
          command: 'version'
          allowTelemetryCollection: true
      - task: TerraformCLI@2
        inputs:
          command: 'init'
          workingDirectory: '$(System.DefaultWorkingDirectory)/containerapp-acr/create-backend'
          allowTelemetryCollection: true
          backendServiceArm: '$(serviceConnection)'
        displayName: "Initialize the template for the backend"      
      - task: TerraformCLI@2
        inputs:
          command: 'plan'
          workingDirectory: '$(System.DefaultWorkingDirectory)/containerapp-acr/create-backend'
          environmentServiceName: 'ServiceConnectiontoDevOps'
          runAzLogin: true
          allowTelemetryCollection: true
          publishPlanResults: 'plan.out'
        displayName: "Plan the deployment"
      - task: AzureCLI@2
        inputs:
          azureSubscription: '$(serviceConnection)'
          scriptType: 'bash'
          scriptLocation: 'inlineScript'
          inlineScript: |
            cd containerapp-acr
            cd create-backend
            set -euo pipefail

            # Example mapping: terraform_address -> az cli command to produce resource id
            declare -A IMPORT_MAP=(
              ["azurerm_resource_group.rg"]="az group show -n tfstatestoragecontapp --query id -o tsv"
              ["azurerm_storage_account.sa"]="az storage account show -n tfstatestoragecontapp -g tfstatestoragecontapp --query id -o tsv"
            )

            for addr in "${!IMPORT_MAP[@]}"; do
              echo "Checking Terraform state for $addr..."
              if terraform state list | grep -qx "$addr"; then
                echo "$addr already in state, skipping import."
                continue
              fi

              echo "$addr not in state. Locating resource id with az..."
              resource_id=$(${IMPORT_MAP[$addr]} || true)
              if [ -z "$resource_id" ]; then
                echo "Resource for $addr not found in Azure, skipping import (it may be safe to create)."
                continue
              fi

              echo "Importing $addr -> $resource_id"
              terraform import -lock-timeout=300 "$addr" "$resource_id"
            done
      - task: TerraformCLI@2
        inputs:
          command: 'apply'
          workingDirectory: '$(System.DefaultWorkingDirectory)/containerapp-acr/create-backend'
          environmentServiceName: 'ServiceConnectiontoDevOps'
          runAzLogin: true
          commandOptions: '-auto-approve'
          allowTelemetryCollection: true
        displayName: "Deploy the backend"
  - template: infrastructure-deployment.yml
    parameters:
      serviceConnection: ${{ variables.serviceConnection }}
      azureLocation: ${{ variables.azureLocation }}

